import math

# Initialize the board
board = [" " for _ in range(9)]

# Print the board
def print_board(board):
    print()
    for row in [board[i*3:(i+1)*3] for i in range(3)]:
        print("|".join(row))
        print("-"*5)
    print()

# Check for a winner
def check_winner(board, player):
    win_conditions = [
        [0,1,2], [3,4,5], [6,7,8],  # rows
        [0,3,6], [1,4,7], [2,5,8],  # cols
        [0,4,8], [2,4,6]            # diagonals
    ]
    for cond in win_conditions:
        if board[cond[0]] == board[cond[1]] == board[cond[2]] == player:
            return True
    return False

# Check if board is full
def is_full(board):
    return " " not in board

# Minimax with Alpha-Beta Pruning
def minimax(board, depth, alpha, beta, is_maximizing):
    if check_winner(board, "O"):
        return 1
    if check_winner(board, "X"):
        return -1
    if is_full(board):
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for i in range(9):
            if board[i] == " ":
                board[i] = "O"
                eval = minimax(board, depth+1, alpha, beta, False)
                board[i] = " "
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
        return max_eval
    else:
        min_eval = math.inf
        for i in range(9):
            if board[i] == " ":
                board[i] = "X"
                eval = minimax(board, depth+1, alpha, beta, True)
                board[i] = " "
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
        return min_eval

# Find the best move for AI
def best_move(board):
    best_val = -math.inf
    move = None
    for i in range(9):
        if board[i] == " ":
            board[i] = "O"
            move_val = minimax(board, 0, -math.inf, math.inf, False)
            board[i] = " "
            if move_val > best_val:
                best_val = move_val
                move = i
    return move

# Main game loop
def play_game():
    print("Welcome to Tic Tac Toe!")
    print("You are X and AI is O.")
    print_board(board)

    while True:
        # Human turn
        human_move = int(input("Enter your move (1-9): ")) - 1
        if board[human_move] != " ":
            print("Invalid move. Try again.")
            continue
        board[human_move] = "X"

        print_board(board)
        if check_winner(board, "X"):
            print("You win! ðŸŽ‰")
            break
        if is_full(board):
            print("It's a draw!")
            break

        # AI turn
        ai_move = best_move(board)
        board[ai_move] = "O"
        print("AI plays:")
        print_board(board)

        if check_winner(board, "O"):
            print("AI wins! ðŸ¤–")
            break
        if is_full(board):
            print("It's a draw!")
            break

# Run the game
if __name__ == "__main__":
    play_game()
